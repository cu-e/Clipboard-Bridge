package io.github.cue.clipboardbridge.server.infrastructure.adapter;

import io.github.cue.clipboardbridge.server.domain.model.ReplyMessage;
import io.github.cue.clipboardbridge.server.domain.port.NotificationService;
import io.github.cue.clipboardbridge.server.infrastructure.port.TelegramBotApi;
import io.github.cue.clipboardbridge.server.infrastructure.port.TelegramUpdateListener;
import io.github.cue.clipboardbridge.server.infrastructure.service.ClientSessionService;
import io.github.cue.clipboardbridge.server.infrastructure.service.WebSocketSessionMessageService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Lazy;
import org.springframework.context.annotation.Primary;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArraySet;

/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram.
 * –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É Telegram –±–æ—Ç–æ–º –∏ WebSocket.
 */
@Service
@Primary
@Slf4j
public class TelegramNotificationService implements NotificationService, TelegramUpdateListener {

    // –•—Ä–∞–Ω–µ–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ - clientId -> userId
    private final Map<String, String> pendingReplies = new ConcurrentHashMap<>();
    // –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - userId -> clientId
    private final Map<String, String> lastClientMessages = new ConcurrentHashMap<>();
    
    // –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    private final Set<String> processedMessageIds = new CopyOnWriteArraySet<>();
    
    private final TelegramBotApi telegramBotApi;
    private final ClientSessionService sessionService;
    private final WebSocketSessionMessageService webSocketService;
    
    public TelegramNotificationService(
            @Lazy TelegramBotApi telegramBotApi,
            ClientSessionService sessionService,
            WebSocketSessionMessageService webSocketService) {
        this.telegramBotApi = telegramBotApi;
        this.sessionService = sessionService;
        this.webSocketService = webSocketService;
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ–±—è –∫–∞–∫ —Å–ª—É—à–∞—Ç–µ–ª—è –≤ –∞–¥–∞–ø—Ç–µ—Ä–µ –±–æ—Ç–∞
        this.telegramBotApi.setUpdateListener(this);
        log.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω TelegramNotificationService.");
    }
    
    @Override
    public void onUpdateReceived(Update update) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        String messageId = getUpdateIdentifier(update);
        if (messageId != null) {
            if (processedMessageIds.contains(messageId)) {
                log.debug("–ü—Ä–æ–ø—É—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID: {}", messageId);
                return;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
            processedMessageIds.add(messageId);
            
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏, –µ—Å–ª–∏ –∏—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
            if (processedMessageIds.size() > 1000) {
                log.debug("–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π");
                // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 500 –∑–∞–ø–∏—Å–µ–π
                List<String> tempList = new ArrayList<>(processedMessageIds);
                tempList.sort(Comparator.naturalOrder());
                int removeCount = tempList.size() - 500;
                if (removeCount > 0) {
                    List<String> toRemove = tempList.subList(0, removeCount);
                    processedMessageIds.removeAll(toRemove);
                }
            }
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if (update.hasMessage() && update.getMessage().hasText()) {
            Long userId = update.getMessage().getFrom().getId();
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            String messageText = update.getMessage().getText();
            log.debug("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, messageText);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            String userIdStr = userId.toString();
            if (pendingReplies.containsValue(userIdStr)) {
                // –ù–∞—Ö–æ–¥–∏–º clientId, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç
                String clientId = null;
                for (Map.Entry<String, String> entry : pendingReplies.entrySet()) {
                    if (entry.getValue().equals(userIdStr)) {
                        clientId = entry.getKey();
                        break;
                    }
                }
                
                if (clientId != null) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–∞–≤–µ–Ω –ª–∏ clientId —Å—Ç—Ä–æ–∫–µ "unknown"
                    if ("unknown".equals(clientId)) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π clientId –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        String savedClientId = lastClientMessages.get(userIdStr);
                        if (savedClientId != null && !savedClientId.equals("unknown")) {
                            clientId = savedClientId;
                        } else {
                            // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ clientId, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            telegramBotApi.sendMessage(userId, "‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å");
                            pendingReplies.remove(clientId);
                            return;
                        }
                    }
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ WebSocket (–≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ)
                    if (sendReplyToClient(clientId, messageText)) {
                        telegramBotApi.sendMessage(userId, "‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É!");
                    } else {
                        telegramBotApi.sendMessage(userId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
                    }
                    
                    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –æ–∂–∏–¥–∞–µ–º–æ–º –æ—Ç–≤–µ—Ç–µ
                    pendingReplies.remove(clientId);
                }
            } else if (messageText.startsWith("/reply")) {
                // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                String clientId = lastClientMessages.get(userIdStr);
                if (clientId != null) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–∞–≤–µ–Ω –ª–∏ clientId —Å—Ç—Ä–æ–∫–µ "unknown"
                    if ("unknown".equals(clientId)) {
                        telegramBotApi.sendMessage(userId, "‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å");
                        return;
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
                    if (sessionService.isSessionDisconnected(clientId)) {
                        telegramBotApi.sendMessage(userId, "‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å: –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è");
                        return;
                    }
                    
                    if (!sessionService.isSessionActive(clientId)) {
                        telegramBotApi.sendMessage(userId, "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –æ—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –Ω–µ –¥–æ–π—Ç–∏");
                    }
                    
                    // –ì–æ—Ç–æ–≤–∏–º—Å—è –∫ –æ—Ç–≤–µ—Ç—É
                    pendingReplies.put(clientId, userIdStr);
                    telegramBotApi.sendMessage(userId, "üîÑ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:");
                } else {
                    telegramBotApi.sendMessage(userId, "‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤");
                }
            } else if (messageText.startsWith("/")) {
                processCommand(userId, messageText);
            }
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±—ç–∫–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
        else if (update.hasCallbackQuery()) {
            String callbackData = update.getCallbackQuery().getData();
            Long userId = update.getCallbackQuery().getFrom().getId();
            
            if (callbackData.startsWith("reply:")) {
                String clientId = callbackData.substring(6); // –£–¥–∞–ª—è–µ–º "reply:"
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–∞–≤–µ–Ω –ª–∏ clientId —Å—Ç—Ä–æ–∫–µ "unknown"
                if ("unknown".equals(clientId)) {
                    telegramBotApi.sendMessage(userId, "‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å");
                    return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
                if (sessionService.isSessionDisconnected(clientId)) {
                    telegramBotApi.sendMessage(userId, "‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å: –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è");
                    return;
                }
                
                if (!sessionService.isSessionActive(clientId)) {
                    telegramBotApi.sendMessage(userId, "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –æ—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –Ω–µ –¥–æ–π—Ç–∏");
                }
                
                pendingReplies.put(clientId, userId.toString());
                
                // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback query
                try {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    sendNotification(userId, "üîÑ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:");
                } catch (Exception e) {
                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback query: {}", e.getMessage());
                }
            }
        }
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è Update –æ–±—ä–µ–∫—Ç–∞, –ø–æ–º–æ–≥–∞—é—â–∏–π –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã.
     *
     * @param update –û–±—ä–µ–∫—Ç Telegram Update
     * @return –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å
     */
    private String getUpdateIdentifier(Update update) {
        if (update.hasMessage() && update.getMessage().getMessageId() != null) {
            return "msg_" + update.getMessage().getMessageId();
        } else if (update.hasCallbackQuery() && update.getCallbackQuery().getId() != null) {
            return "cbq_" + update.getCallbackQuery().getId();
        }
        return null;
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ WebSocket
     * 
     * @param clientId ID –∫–ª–∏–µ–Ω—Ç–∞ –≤ WebSocket
     * @param message —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     * @return true –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, false –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
     */
    private boolean sendReplyToClient(String clientId, String message) {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ clientId
            if (clientId == null || clientId.isEmpty() || "unknown".equals(clientId)) {
                log.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π ID –∫–ª–∏–µ–Ω—Ç–∞: {}", clientId);
                return false;
            }
            
            ReplyMessage reply = ReplyMessage.builder()
                    .response(message)
                    .build();
            webSocketService.sendToUser(clientId, "/queue/reply", reply);
            log.info("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É {} —á–µ—Ä–µ–∑ WebSocket.", clientId);
            return true;
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É {}: {}", clientId, e.getMessage(), e);
            return false;
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
     * 
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param command –∫–æ–º–∞–Ω–¥–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "/"
     */
    private void processCommand(Long userId, String command) {
        String commandLower = command.toLowerCase();
        if (commandLower.startsWith("/start")) {
            sendNotification(userId, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –±–æ—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏.");
        } else if (commandLower.startsWith("/help")) {
            sendNotification(userId, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                    "/start - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n" +
                    "/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n" +
                    "/reply - –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞\n" +
                    "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π");
        } else if (commandLower.startsWith("/stats")) {
            // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–π
            Map<String, Object> stats = sessionService.getSessionStats();
            String statsMessage = String.format(
                    "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:\n\n" +
                    "–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: %d\n" +
                    "–û—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: %d\n" +
                    "–í—Å–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: %d\n" +
                    "–í—Å–µ–≥–æ —Ä–∞–∑—Ä—ã–≤–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: %d\n",
                    stats.get("activeCount"),
                    stats.get("disconnectedCount"),
                    stats.get("totalCount"),
                    stats.get("disconnectionCount")
            );
            sendNotification(userId, statsMessage);
            
            // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏—è—Ö
            int cleanedCount = sessionService.cleanupDisconnectedSessions();
            if (cleanedCount > 0) {
                sendNotification(userId, "üßπ –û—á–∏—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ " + cleanedCount + " –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏—è—Ö");
            }
        } else {
            sendNotification(userId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.");
        }
    }
    
    /**
     * –£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞.
     * –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É "–û—Ç–≤–µ—Ç–∏—Ç—å", –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω.
     *
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
     * @param clientId ID –∫–ª–∏–µ–Ω—Ç–∞ WebSocket.
     * @param message –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞.
     */
    public void notifyAboutClientMessage(Long userId, String clientId, String message) {
        String clientIdForLog = (clientId == null || clientId.isEmpty()) ? "unknown" : clientId;
        log.info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {}", userId, clientIdForLog);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ /reply
        lastClientMessages.put(userId.toString(), clientIdForLog);

        boolean isClientDisconnected = "unknown".equals(clientIdForLog) || sessionService.isSessionDisconnected(clientIdForLog);
        boolean isClientActive = !isClientDisconnected && sessionService.isSessionActive(clientIdForLog);

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        String textToSend;
        if (isClientDisconnected) {
            Long disconnectTime = sessionService.getLastDisconnectTime(clientIdForLog);
            String disconnectTimeInfo = "";
            if (disconnectTime != null) {
                long timeSinceDisconnect = System.currentTimeMillis() - disconnectTime;
                if (timeSinceDisconnect < 60000) { disconnectTimeInfo = String.format(" %d —Å–µ–∫. –Ω–∞–∑–∞–¥", timeSinceDisconnect / 1000); }
                else if (timeSinceDisconnect < 3600000) { disconnectTimeInfo = String.format(" %d –º–∏–Ω. –Ω–∞–∑–∞–¥", timeSinceDisconnect / 60000); }
                else { disconnectTimeInfo = String.format(" %.1f —á. –Ω–∞–∑–∞–¥", timeSinceDisconnect / 3600000.0); }
            }
             textToSend = "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–û–¢–ö–õ–Æ–ß–ò–õ–°–Ø" + disconnectTimeInfo + "):\n---\n" + message + "\n\n‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è, –æ—Ç–≤–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.";
        } else if (!isClientActive) {
             textToSend = "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–ù–ï–ê–ö–¢–ò–í–ï–ù):\n---\n" + message + "\n\n‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –æ—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –Ω–µ –¥–æ–π—Ç–∏.";
        } else {
             textToSend = "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (" + clientIdForLog + "):\n---\n" + message;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω)
        InlineKeyboardMarkup replyMarkup = null;
        if (isClientActive) {
            List<InlineKeyboardButton> buttonRow = new ArrayList<>();
            InlineKeyboardButton replyButton = InlineKeyboardButton.builder()
                    .text("–û—Ç–≤–µ—Ç–∏—Ç—å")
                    .callbackData("reply:" + clientIdForLog)
                    .build();
            buttonRow.add(replyButton);
            replyMarkup = InlineKeyboardMarkup.builder().keyboardRow(buttonRow).build();
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä
        boolean sent;
        if (replyMarkup != null) {
            sent = telegramBotApi.sendMessageWithMarkup(userId, textToSend, replyMarkup);
        } else {
            sent = telegramBotApi.sendMessage(userId, textToSend);
        }

        if (!sent) {
            log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {} –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {} —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä.", userId, clientIdForLog);
        } else {
            log.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", userId, clientIdForLog);
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram.
     *
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
     * @param message —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     * @return true –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, false –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
     */
    public boolean sendNotification(Long userId, String message) {
        // –ü—Ä–æ—Å—Ç–æ –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –∞–¥–∞–ø—Ç–µ—Ä—É
        log.debug("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {} —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä...", userId);
        boolean sent = telegramBotApi.sendMessage(userId, message);
        if (sent) {
            log.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", userId);
        } else {
             log.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {} —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä", userId);
        }
        return sent;
    }
    
    /**
     * {@inheritDoc}
     */
    @Override
    public int broadcastNotification(String message) {
        List<Long> users = telegramBotApi.getBotUsers(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º API
        int successCount = 0;
        for (Long userId : users) {
            if (telegramBotApi.sendMessage(userId, message)) {
                successCount++;
            }
        }
        
        log.info("–®–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {}/{} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", successCount, users.size());
        return successCount;
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞.
     * 
     * @return –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–π —Å–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    public List<Long> getBotUsers() {
        return new ArrayList<>(telegramBotApi.getBotUsers());
    }
} 